<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on Carpe diem</title>
    <link>https://cosmolei.github.io/categories/Tech/</link>
    <description>Recent content in Tech on Carpe diem</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>All right is mine</copyright>
    <lastBuildDate>Thu, 15 Apr 2021 14:50:32 +0800</lastBuildDate><atom:link href="https://cosmolei.github.io/categories/Tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>vscode中anaconda的python debug</title>
      <link>https://cosmolei.github.io/posts/vscode%E4%B8%ADanaconda%E7%9A%84python-debug/</link>
      <pubDate>Thu, 15 Apr 2021 14:50:32 +0800</pubDate>
      
      <guid>https://cosmolei.github.io/posts/vscode%E4%B8%ADanaconda%E7%9A%84python-debug/</guid>
      <description>&lt;p&gt;在调试ioserver的过程中，发现并没有正常条转到断点。&lt;/p&gt;
&lt;p&gt;原因是在conda的环境ioserver中，安装了项目打包后的程序，导致从.vscode目录下的settings.json中配置的环境变量PYTHONPATH的效果抵消了。&lt;/p&gt;
&lt;p&gt;于是卸载了项目打包后的程序，之后，重新正确配置PYTHONPATH&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;python.pythonPath&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Users/cosmo/miniconda3/envs/the_env/bin/python&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;terminal.integrated.env.osx&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;PYTHONPATH&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${workspaceFolder}&amp;#34;&lt;/span&gt;}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解决问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>搭建私有npm仓库</title>
      <link>https://cosmolei.github.io/posts/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89npm%E4%BB%93%E5%BA%93/</link>
      <pubDate>Mon, 22 Mar 2021 14:50:32 +0800</pubDate>
      
      <guid>https://cosmolei.github.io/posts/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89npm%E4%BB%93%E5%BA%93/</guid>
      <description>&lt;h3 id=&#34;发布到npm仓库本地使用verdaccio搭建私有npm仓库&#34;&gt;
  发布到npm仓库（本地使用verdaccio搭建私有npm仓库）
  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%91%e5%b8%83%e5%88%b0npm%e4%bb%93%e5%ba%93%e6%9c%ac%e5%9c%b0%e4%bd%bf%e7%94%a8verdaccio%e6%90%ad%e5%bb%ba%e7%a7%81%e6%9c%89npm%e4%bb%93%e5%ba%93&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 全局安装verdaccio&lt;/span&gt;
npm install -g verdaccio

&lt;span style=&#34;color:#75715e&#34;&gt;# 启动verdaccio&lt;/span&gt;
verdaccio

&lt;span style=&#34;color:#75715e&#34;&gt;# 创建verdaccio用户&lt;/span&gt;
npm adduser --registry http://localhost:4873

&lt;span style=&#34;color:#75715e&#34;&gt;# 发布包&lt;/span&gt;
npm publish --registry http://localhost:4873
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;heading&#34;&gt;
  
  &lt;a class=&#34;anchor&#34; href=&#34;#heading&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>Prometheus node_exporter网络指标</title>
      <link>https://cosmolei.github.io/posts/node_exporter%E7%BD%91%E7%BB%9C%E6%8C%87%E6%A0%87/</link>
      <pubDate>Tue, 09 Mar 2021 14:50:32 +0800</pubDate>
      
      <guid>https://cosmolei.github.io/posts/node_exporter%E7%BD%91%E7%BB%9C%E6%8C%87%E6%A0%87/</guid>
      <description>&lt;p&gt;node_exporter中的网络相关指标由node_network前缀开头。&lt;/p&gt;
&lt;p&gt;我们可以通过访问node_exporter的服务端口，直接查看该节点的各项指标：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;node_exporter%E7%BD%91%E7%BB%9C%E6%8C%87%E6%A0%87/image-20210309172048923.png&#34; alt=&#34;image-20210309172048923&#34; /&gt;&lt;/p&gt;
&lt;p&gt;其中，常用指标有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node_network_receive_bytes_total：网卡上传累计字节数&lt;/li&gt;
&lt;li&gt;node_network_transmit_bytes_total：网卡下载累计字节数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中选项device代表每个网卡。&lt;/p&gt;
&lt;p&gt;通过Prometheus计算上传速率/下载速率的查询语句：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;上传速率：irate(node_network_transmit_bytes_total{device!=&amp;ldquo;lo&amp;rdquo;}[1m]) by (instance, job)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载速率：irate(node_network_receive_bytes_total{device!=&amp;ldquo;lo&amp;rdquo;}[1m]) by (instance, job)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;device : 代表网卡&lt;/p&gt;
&lt;p&gt;irate : 分组函数，取的是在指定时间范围内的最近两个数据点来算速率&lt;/p&gt;
&lt;p&gt;[1m] : 分组的时长&lt;/p&gt;
&lt;p&gt;by(instance,job) : 代表按job、instance分组&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>emqx体系分析</title>
      <link>https://cosmolei.github.io/posts/emqx%E4%BD%93%E7%B3%BB%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 24 Feb 2021 14:50:32 +0800</pubDate>
      
      <guid>https://cosmolei.github.io/posts/emqx%E4%BD%93%E7%B3%BB%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;EMQ X是什么。。。&lt;/p&gt;
&lt;h3 id=&#34;emqx-broker&#34;&gt;
  EMQX Broker
  &lt;a class=&#34;anchor&#34; href=&#34;#emqx-broker&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;完全开源，提供一个管理平台和mqtt broker。&lt;/p&gt;
&lt;p&gt;安装release版本rpm包，启动servie&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#docker pull emqx/emqx:4.2.7  &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#docker run -d --name emqx -p 1883:1883 -p 8083:8083 -p 8883:8883 -p 8084:8084 -p 18083:18083 emqx/emqx:4.2.7&lt;/span&gt;

sudo systemctl start emqx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动EMQX客户端连接测试成功。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ubuntu 20.04安装microstack出错</title>
      <link>https://cosmolei.github.io/posts/Ubuntu-20.04%E5%AE%89%E8%A3%85microstack%E5%87%BA%E9%94%99/</link>
      <pubDate>Wed, 13 Jan 2021 15:50:32 +0800</pubDate>
      
      <guid>https://cosmolei.github.io/posts/Ubuntu-20.04%E5%AE%89%E8%A3%85microstack%E5%87%BA%E9%94%99/</guid>
      <description>&lt;h2 id=&#34;ubuntu-2004安装microstack出错&#34;&gt;
  Ubuntu 20.04安装microstack出错
  &lt;a class=&#34;anchor&#34; href=&#34;#ubuntu-2004%e5%ae%89%e8%a3%85microstack%e5%87%ba%e9%94%99&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo snap install microstack --devmode --beta
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;失败&lt;/p&gt;
&lt;p&gt;查看日志&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ systemctl status snap.microstack.load-modules.service
modprobe: ERROR: could not insert &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vhost_vsock&amp;#39;&lt;/span&gt;: Device or resource busy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Ubuntu 20.04 单节点安装部署microstack</title>
      <link>https://cosmolei.github.io/posts/Ubuntu-20.04-%E5%8D%95%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2microstack/</link>
      <pubDate>Wed, 13 Jan 2021 14:50:32 +0800</pubDate>
      
      <guid>https://cosmolei.github.io/posts/Ubuntu-20.04-%E5%8D%95%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2microstack/</guid>
      <description>&lt;h2 id=&#34;ubuntu-2004-单节点安装部署microstack&#34;&gt;
  Ubuntu 20.04 单节点安装部署microstack
  &lt;a class=&#34;anchor&#34; href=&#34;#ubuntu-2004-%e5%8d%95%e8%8a%82%e7%82%b9%e5%ae%89%e8%a3%85%e9%83%a8%e7%bd%b2microstack&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;h4 id=&#34;1-安装&#34;&gt;
  1. 安装
  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%ae%89%e8%a3%85&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;通过snap安装，如果没有snap请先安装snap。&lt;/p&gt;
&lt;p&gt;执行以下命令安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo snap install microstack --devmode --beta
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果安装成功，则跳到第二部分初始化。&lt;/p&gt;
&lt;p&gt;如果安装完提示未成功，systemctl查看status提示&lt;/p&gt;
&lt;p&gt;modprobe: ERROR: could not insert &amp;lsquo;vhost_vsock&amp;rsquo;: Device or resource busy&lt;/p&gt;
&lt;p&gt;则查看是否有冲突&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ lsmod | grep vsock
&lt;span style=&#34;color:#75715e&#34;&gt;# vsock模块冲突&lt;/span&gt;
vmw_vsock_virtio_transport_common    &lt;span style=&#34;color:#ae81ff&#34;&gt;32768&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
vmw_vsock_vmci_transport    &lt;span style=&#34;color:#ae81ff&#34;&gt;32768&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
vsock                  &lt;span style=&#34;color:#ae81ff&#34;&gt;36864&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; vmw_vsock_virtio_transport_common,vmw_vsock_vmci_transport
vmw_vmci               &lt;span style=&#34;color:#ae81ff&#34;&gt;69632&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; vmw_balloon,vmw_vsock_vmci_transport
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>grafana免登录</title>
      <link>https://cosmolei.github.io/posts/grafana%E5%85%8D%E7%99%BB%E5%BD%95/</link>
      <pubDate>Thu, 10 Dec 2020 14:50:32 +0800</pubDate>
      
      <guid>https://cosmolei.github.io/posts/grafana%E5%85%8D%E7%99%BB%E5%BD%95/</guid>
      <description>&lt;p&gt;在ubuntu下，grafana以systemctl管理的service的方式运行，修改默认环境变量配置文件：&lt;/p&gt;
&lt;p&gt;/etc/default/grafana-server文件&lt;/p&gt;
&lt;p&gt;增加以下环境变量配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;GF_AUTH_PROXY_ENABLED&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true
GF_AUTH_ANONYMOUS_ENABLED&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>golang模块开发</title>
      <link>https://cosmolei.github.io/posts/golang%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/</link>
      <pubDate>Wed, 09 Dec 2020 14:50:32 +0800</pubDate>
      
      <guid>https://cosmolei.github.io/posts/golang%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/</guid>
      <description>&lt;p&gt;[[golang]]&lt;/p&gt;
&lt;p&gt;golang模块开发流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建项目目录&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ mkdir myapp
$ cd myapp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模块初始化， 会生成go.mod文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ go mod init myapp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建main入口文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 文件名随意，但package要是main
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Welcome&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引入第三方库之后，执行go mod vendor下载&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gopkg.in/alecthomas/kingpin.v2&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;kingpin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Parse&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Welcome&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在代码中引入包后执行，会主动下载包&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ go mod vendor
go: finding module &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; package gopkg.in/alecthomas/kingpin.v2
go: found gopkg.in/alecthomas/kingpin.v2 in gopkg.in/alecthomas/kingpin.v2 v2.2.6
go: finding module &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; package github.com/alecthomas/units
go: finding module &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; package github.com/alecthomas/template
go: downloading github.com/alecthomas/units v0.0.0-20210208195552-ff826a37aa15
go: found github.com/alecthomas/template in github.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751
go: found github.com/alecthomas/units in github.com/alecthomas/units v0.0.0-20210208195552-ff826a37aa15
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>安装部署prometheus</title>
      <link>https://cosmolei.github.io/posts/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2prometheus/</link>
      <pubDate>Mon, 07 Dec 2020 17:17:32 +0800</pubDate>
      
      <guid>https://cosmolei.github.io/posts/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2prometheus/</guid>
      <description>&lt;h3 id=&#34;安装步骤&#34;&gt;
  安装步骤
  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%89%e8%a3%85%e6%ad%a5%e9%aa%a4&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h4 id=&#34;一安装prometheus&#34;&gt;
  一、安装prometheus
  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e5%ae%89%e8%a3%85prometheus&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;部署路径：/usr/local/prometheus&lt;/p&gt;
&lt;p&gt;服务文件：/usr/lib/systemd/system/prometheus.service&lt;/p&gt;
&lt;p&gt;部署过程:&lt;/p&gt;
&lt;h5 id=&#34;1-解压文件复制到指定路径&#34;&gt;
  1. 解压文件，复制到指定路径
  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e8%a7%a3%e5%8e%8b%e6%96%87%e4%bb%b6%e5%a4%8d%e5%88%b6%e5%88%b0%e6%8c%87%e5%ae%9a%e8%b7%af%e5%be%84&#34;&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;tar zxvf prometheus-2.22.2.linux-amd64.tar.gz
mv prometheus-2.22.2.linux-amd64 prometheus
cp -r prometheus /usr/local/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;2-创建service服务文件&#34;&gt;
  2. 创建service服务文件
  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e5%88%9b%e5%bb%baservice%e6%9c%8d%e5%8a%a1%e6%96%87%e4%bb%b6&#34;&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;vim /usr/lib/systemd/system/prometheus.service

&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Unit&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Description&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Prometheus
After&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;network.target
 
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Service&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
ExecStart&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/local/prometheus/prometheus --config.file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/local/prometheus/prometheus.yml --storage.tsdb.path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/data/prometheus --storage.tsdb.retention.time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;180d --storage.tsdb.retention.size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;29TB
User&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;root

&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Install&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
WantedBy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中，执行命令涉及的参数如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;config.file：配置文件路径。&lt;/li&gt;
&lt;li&gt;storage.tsdb.path：tsdb存储路径，默认是相对于执行路径的/data目录。&lt;/li&gt;
&lt;li&gt;storage.tsdb.retention.time：数据保存的最长时间，这里是180天。&lt;/li&gt;
&lt;li&gt;storage.tsdb.retention.size：数据保存的最大量值，这里最大保存29TB的数据，再有更多的数据，则会删除最早的历史数据来腾出空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;加入开机启动：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;systemctl enable prometheus
systemctl start prometheus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Elastic Search的全文搜索</title>
      <link>https://cosmolei.github.io/posts/Elastic-Search%E7%9A%84%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Mon, 07 Dec 2020 14:50:32 +0800</pubDate>
      
      <guid>https://cosmolei.github.io/posts/Elastic-Search%E7%9A%84%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2/</guid>
      <description>&lt;h3 id=&#34;搜索方式&#34;&gt;
  搜索方式
  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%90%9c%e7%b4%a2%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id=&#34;查询dsl&#34;&gt;
  查询DSL
  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9f%a5%e8%af%a2dsl&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Elasticsearch提供基于JSON的完整查询DSL来定义查询。查询DSL包括两种子句：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;叶查询子句&lt;/strong&gt;：在特定的字段上查找特定的值，如&lt;strong&gt;match&lt;/strong&gt;、&lt;strong&gt;term&lt;/strong&gt;或&lt;strong&gt;range&lt;/strong&gt;查询。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复合查询子句&lt;/strong&gt;：包含其他叶查询或复合查询子句，以合理的方式结合多条查询（比如bool或dis_max查询），或者改变查询行为（比如not或constant_score查询）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据匹配和计算方式不同，查询类别分为两类。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;查询&lt;/strong&gt;(query)用于检查内容与条件是否匹配，并且计算_score元字段表示匹配度。查询的结构中以query参数开始来执行内容查询。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;过滤&lt;/strong&gt;(filter)不计算匹配得分，只是简单的决定文档是否匹配。内容过滤主要通过过滤结构化数据，例如时间、数值、not_analyze的文本等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查询(query)的子句也可以传递filter参数，比如bool查询内的filter、constant_score查询内的filter参数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
  	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;bool&amp;#34;&lt;/span&gt;: {
  		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;must&amp;#34;&lt;/span&gt;: [
  			{
  				&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;: { &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Search&amp;#34;&lt;/span&gt;}	
  			},
				{
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;: { &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Elasticsearch&amp;#34;&lt;/span&gt;}
        }
  		],
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;filter&amp;#34;&lt;/span&gt;: [
        {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;term&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;published&amp;#34;&lt;/span&gt;}},
        {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;range&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;publish_date&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;gte&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2019-01-01&amp;#34;&lt;/span&gt;}}}
      ]
  	}
  }
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>ElasticSearch(二)</title>
      <link>https://cosmolei.github.io/posts/ElasticSearch%E4%BA%8C/</link>
      <pubDate>Mon, 07 Dec 2020 14:50:32 +0800</pubDate>
      
      <guid>https://cosmolei.github.io/posts/ElasticSearch%E4%BA%8C/</guid>
      <description>&lt;h2 id=&#34;elastic-search中的数据建模方法&#34;&gt;
  Elastic Search中的数据建模方法
  &lt;a class=&#34;anchor&#34; href=&#34;#elastic-search%e4%b8%ad%e7%9a%84%e6%95%b0%e6%8d%ae%e5%bb%ba%e6%a8%a1%e6%96%b9%e6%b3%95&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;要想让查询速度更快，让更新更容易而且代价更小，定义数据结构是要解决的关键问题之一。虽然大多数NoSQL方案都无法提供关系型映射和查询，蛋ES仍然提供了一些管理关系型数据的方法。&lt;/p&gt;
&lt;p&gt;在Elasticsearch中主要有4中定义文档结构的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扁平式结构（应用侧关联）&lt;/li&gt;
&lt;li&gt;数据反范式化&lt;/li&gt;
&lt;li&gt;嵌套对象&lt;/li&gt;
&lt;li&gt;父子关系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;扁平式结构&lt;/strong&gt;：在扁平式结构中，最简单的键值对索引文档，有时候也用简单对象（plain objects）的形式。数据存储成这种格式可以索引更快，也可以查询更快。缺点是会导致难以维护不同实体之间的关系。使用扁平式结构之后，就经常要在应用代码中做关联，以发现文档之间的关系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据反范式化&lt;/strong&gt;：把其他文档内的相关字段多复制一份，目的只是为了维护实体之间的关系。这种方法可用于维护扁平式结构，也可以通过在每份文档中多保存一到多个字段来维护它们之间的关系。这种方法速度很快，但会多占用大量空间，因为有时候要处理很多份副本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;嵌套与父子关系&lt;/strong&gt;：这些关系是Elasticsearch为管理关系型数据而自带的解决方案。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>oracle中的merge into</title>
      <link>https://cosmolei.github.io/posts/oracle%E4%B8%AD%E7%9A%84merge-into/</link>
      <pubDate>Mon, 07 Dec 2020 14:50:32 +0800</pubDate>
      
      <guid>https://cosmolei.github.io/posts/oracle%E4%B8%AD%E7%9A%84merge-into/</guid>
      <description>&lt;h2 id=&#34;oracle-merge-into&#34;&gt;
  oracle merge into
  &lt;a class=&#34;anchor&#34; href=&#34;#oracle-merge-into&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-oracle&#34; data-lang=&#34;oracle&#34;&gt;MERGE INTO A_MERGE A USING (select B.AID,B.NAME,B.YEAR from B_MERGE B) C ON (A.id=C.AID)

WHEN MATCHED THEN

UPDATE SET A.YEAR=C.YEAR

WHEN NOT MATCHED THEN

 INSERT(A.ID,A.NAME,A.YEAR) VALUES(C.AID,C.NAME,C.YEAR); 

commit;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>ElasticSearch(一)</title>
      <link>https://cosmolei.github.io/posts/ElasticSearch%E4%B8%80/</link>
      <pubDate>Sun, 06 Dec 2020 14:50:32 +0800</pubDate>
      
      <guid>https://cosmolei.github.io/posts/ElasticSearch%E4%B8%80/</guid>
      <description>&lt;h3 id=&#34;什么叫全文检索&#34;&gt;
  什么叫全文检索？
  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e5%8f%ab%e5%85%a8%e6%96%87%e6%a3%80%e7%b4%a2&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;对非&lt;strong&gt;结构化的数据/结构化数据&lt;/strong&gt;建立索引，再对索引进行搜索&lt;strong&gt;文档&lt;/strong&gt;的过程就叫全文检索(Full-text Search)。&lt;/p&gt;
&lt;h4 id=&#34;数据格式分类&#34;&gt;
  数据格式（分类）
  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e6%a0%bc%e5%bc%8f%e5%88%86%e7%b1%bb&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;非结构化数据&lt;/strong&gt;：没有固定格式的数据（html网页，文章，txt， excel） &amp;mdash; 没有定长，字段，描述&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结构化数据&lt;/strong&gt;：有固定格式数据（数据库一行数据） &amp;mdash; 有固定长度（varchar(50)），字段，描述&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;倒排索引&#34;&gt;
  倒排索引
  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%80%92%e6%8e%92%e7%b4%a2%e5%bc%95&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;搜索采用倒排索引算法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;顺序扫描法：有一本词典，这本词典没有目录，查询一个词语只能从第一页开始，一页一页查询，直到找到为止。（数据库采用顺序扫描法 &amp;mdash;&amp;gt; 但可以建立索引，也是倒排索引）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;倒排扫描法：有一本词典，有目录，查询一个词语，只需查询目录，从目录找到词语所在页码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;问题：为什么不使用数据库进行海量数据索引（虽然数据库也可以建立倒排索引进行搜索）？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据库缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;全表扫描 &amp;mdash;速度非常慢&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字段中所有的内容都要挨个匹配 &amp;mdash;速度慢&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全文检索问题&lt;/p&gt;
&lt;p&gt;%口罩罩% 无法实现分词搜索&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建立索引，全文检索不走索引&lt;/p&gt;
&lt;p&gt;like不走索引，不建分词&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Centos7 kubernetes搭建</title>
      <link>https://cosmolei.github.io/posts/Centos7-kubernetes%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Thu, 07 May 2020 14:50:32 +0800</pubDate>
      
      <guid>https://cosmolei.github.io/posts/Centos7-kubernetes%E6%90%AD%E5%BB%BA/</guid>
      <description>&lt;h3 id=&#34;环境准备&#34;&gt;
  环境准备
  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%8e%af%e5%a2%83%e5%87%86%e5%a4%87&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h4 id=&#34;机器环境&#34;&gt;
  机器环境
  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%ba%e5%99%a8%e7%8e%af%e5%a2%83&#34;&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;节点CPU核数&amp;gt;=2&lt;/p&gt;
&lt;p&gt;DNS网络&lt;/p&gt;
&lt;p&gt;linux内核&amp;gt;4以上，Centos 7 内核默认是3.10.0&lt;/p&gt;
&lt;p&gt;准备3台虚拟机环境&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kubernetes(一)</title>
      <link>https://cosmolei.github.io/posts/kubernetes%E4%B8%80/</link>
      <pubDate>Wed, 06 May 2020 14:50:32 +0800</pubDate>
      
      <guid>https://cosmolei.github.io/posts/kubernetes%E4%B8%80/</guid>
      <description>&lt;h3 id=&#34;pod底层核心原理&#34;&gt;
  pod底层核心原理
  &lt;a class=&#34;anchor&#34; href=&#34;#pod%e5%ba%95%e5%b1%82%e6%a0%b8%e5%bf%83%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;pause容器共享网络，本地容器相互访问只需要使用localhost来访问，不需要ip地址。&lt;/p&gt;
&lt;p&gt;每一个pod里都有pause容器。&lt;/p&gt;
&lt;p&gt;pod内部的容器没有ip地址。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建pod后，会先创建pause容器。pause容器先于业务容器创建。&lt;/li&gt;
&lt;li&gt;pause容器用来共享pod中所有容器的网络，存储。&lt;/li&gt;
&lt;li&gt;pod中所有容器互相之间的访问，只需要使用localhost访问即可，相当于访问本地服务一样。&lt;/li&gt;
&lt;li&gt;一个pod只能在一个物理机上运行，不能分裂。一个物理机上可以部署多个pod。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;pod是K8s中的最小单位，一个Pod有一个或多个容器组成。&lt;/p&gt;
&lt;p&gt;pod用来做集群，只需要部署多个内容相同的pod。&lt;/p&gt;
&lt;p&gt;pod一旦当机，就不存在了（生命周期短）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>postgresql 创建用户及表空间</title>
      <link>https://cosmolei.github.io/posts/postgresql%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7/</link>
      <pubDate>Mon, 06 Apr 2020 14:50:32 +0800</pubDate>
      
      <guid>https://cosmolei.github.io/posts/postgresql%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7/</guid>
      <description>&lt;p&gt;进入管理员界面&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;psql postgres

&lt;span style=&#34;color:#75715e&#34;&gt;#创建用户(ROLE)&lt;/span&gt;
postgres&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# create user testuser with password &amp;#39;******&amp;#39;;&lt;/span&gt;
CREATE ROLE
postgres&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# create database testdb owner testuser;&lt;/span&gt;
CREATE DATABASE
postgres&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# grant all on database testdb to testuser;&lt;/span&gt;
GRANT
postgres&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# alter user testuser superuser;&lt;/span&gt;
ALTER ROLE
postgres&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# \du&lt;/span&gt;
                              角色列表
  角色名称   |                    属性                    | 成员属于 
-------------+--------------------------------------------+----------
 postgres    | 超级用户, 建立角色, 建立 DB, 复制, 绕过RLS | &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
 testuser | 超级用户                                   | &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;

postgres&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>IO模型讲义</title>
      <link>https://cosmolei.github.io/posts/IO%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sat, 06 Apr 2019 14:50:32 +0800</pubDate>
      
      <guid>https://cosmolei.github.io/posts/IO%E6%A8%A1%E5%9E%8B/</guid>
      <description>&lt;h2 id=&#34;io模型讲义&#34;&gt;
  IO模型讲义
  &lt;a class=&#34;anchor&#34; href=&#34;#io%e6%a8%a1%e5%9e%8b%e8%ae%b2%e4%b9%89&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;用户空间和内核空间&#34;&gt;
  用户空间和内核空间
  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e6%88%b7%e7%a9%ba%e9%97%b4%e5%92%8c%e5%86%85%e6%a0%b8%e7%a9%ba%e9%97%b4&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用户空间：用户程序使用的内存空间&lt;/li&gt;
&lt;li&gt;内核空间：系统内核程序使用的内存空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pio与dma&#34;&gt;
  PIO与DMA
  &lt;a class=&#34;anchor&#34; href=&#34;#pio%e4%b8%8edma&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PIO
早先的磁盘和内存之间的数据传输要经过CPU存储转发，这种方式成为PIO&lt;/li&gt;
&lt;li&gt;DMA
后来，DMA（直接内存访问，Direct Memory Access）取代了PIO，它可以不经过CPU而直接进行磁盘和内存（内核空间）的数据交换。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缓存io和直接io&#34;&gt;
  缓存IO和直接IO
  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%93%e5%ad%98io%e5%92%8c%e7%9b%b4%e6%8e%a5io&#34;&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;缓存IO：数据从磁盘先通过DMA copy到内核空间，再从内核空间通过cpu copy到用户空间&lt;/p&gt;
&lt;p&gt;直接IO： 数据从磁盘通过DMA copy到用户空间&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>命令行中使用git命令中文乱码怎么办？</title>
      <link>https://cosmolei.github.io/posts/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E4%BD%BF%E7%94%A8git%E5%91%BD%E4%BB%A4%E4%B8%AD%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E6%80%8E%E4%B9%88%E5%8A%9E/</link>
      <pubDate>Fri, 22 Mar 2019 14:50:32 +0800</pubDate>
      
      <guid>https://cosmolei.github.io/posts/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E4%BD%BF%E7%94%A8git%E5%91%BD%E4%BB%A4%E4%B8%AD%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E6%80%8E%E4%B9%88%E5%8A%9E/</guid>
      <description>&lt;h2 id=&#34;命令行中使用git命令中文乱码怎么办&#34;&gt;
  命令行中使用git命令中文乱码怎么办？
  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%91%bd%e4%bb%a4%e8%a1%8c%e4%b8%ad%e4%bd%bf%e7%94%a8git%e5%91%bd%e4%bb%a4%e4%b8%ad%e6%96%87%e4%b9%b1%e7%a0%81%e6%80%8e%e4%b9%88%e5%8a%9e&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;git 默认中文文件名是\xxx\xxx等八进制形式，是因为对0x80以上的字符进行了转义。&lt;/p&gt;
&lt;p&gt;解决办法是设置core.quotepath为false&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git config --global core.quotepath false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Commands that output paths (e.g. &lt;em&gt;ls-files&lt;/em&gt;, &lt;em&gt;diff&lt;/em&gt;), will quote “unusual” characters in the pathname by enclosing the pathname in double-quotes and escaping those characters with backslashes in the same way C escapes control characters (e.g. &lt;code&gt;\t&lt;/code&gt; for TAB, &lt;code&gt;\n&lt;/code&gt; for LF, &lt;code&gt;\\&lt;/code&gt; for backslash) or bytes with values larger than 0x80 (e.g. octal &lt;code&gt;\302\265&lt;/code&gt; for “micro” in UTF-8). If this variable is set to false, bytes higher than 0x80 are not considered “unusual” any more. Double-quotes, backslash and control characters are always escaped regardless of the setting of this variable. A simple space character is not considered “unusual”. Many commands can output pathnames completely verbatim using the &lt;code&gt;-z&lt;/code&gt; option. The default value is true.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为 &lt;code&gt;core.quotepath&lt;/code&gt; 默认值为 &lt;code&gt;true&lt;/code&gt;，git 命令把输出的内容中，存在用双引号引起来的路径名中的“不寻常”（指中文，或大于 0x80 的字节）的字符，用反斜杠进行转转义。&lt;/p&gt;
&lt;p&gt;例如：会把 &lt;code&gt;Tab&lt;/code&gt; 转义为 &lt;code&gt;\t  &lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>fatal: unable to access server certificate verification failed</title>
      <link>https://cosmolei.github.io/posts/git-failed/</link>
      <pubDate>Thu, 22 Mar 2018 14:50:32 +0800</pubDate>
      
      <guid>https://cosmolei.github.io/posts/git-failed/</guid>
      <description>&lt;h2 id=&#34;git-clone时遇到fatal-unable-to-access-server-certificate-verification-failed&#34;&gt;
  git clone时遇到fatal: unable to access server certificate verification failed
  &lt;a class=&#34;anchor&#34; href=&#34;#git-clone%e6%97%b6%e9%81%87%e5%88%b0fatal-unable-to-access-server-certificate-verification-failed&#34;&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;git clone 时遇到这样的问题：&lt;/p&gt;
&lt;p&gt;fatal: unable to access &amp;lsquo;https://*.git&amp;rsquo;: server certificate verification failed. CAfile: none CRLfile: none&lt;/p&gt;
&lt;p&gt;解决办法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git config --global http.sslverify false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
